
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  fullname: 'fullname',
  username: 'username',
  email: 'email',
  password: 'password',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  permissions: 'permissions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminRoleScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  roleId: 'roleId',
  createdAt: 'createdAt'
};

exports.Prisma.BannerScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  text: 'text',
  linkText: 'linkText',
  linkUrl: 'linkUrl',
  backgroundColor: 'backgroundColor',
  textColor: 'textColor',
  isActive: 'isActive',
  priority: 'priority',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  productCode: 'productCode',
  name: 'name',
  description: 'description',
  briefDescription: 'briefDescription',
  fullDescription: 'fullDescription',
  category: 'category',
  subCategory: 'subCategory',
  price: 'price',
  imageUrl: 'imageUrl',
  stock: 'stock',
  isActive: 'isActive',
  goldWeight: 'goldWeight',
  diamondDetails: 'diamondDetails',
  diamondQuantity: 'diamondQuantity',
  diamondSize: 'diamondSize',
  diamondWeight: 'diamondWeight',
  diamondQuality: 'diamondQuality',
  otherGemstones: 'otherGemstones',
  orderDuration: 'orderDuration',
  metalType: 'metalType',
  stoneType: 'stoneType',
  settingType: 'settingType',
  size: 'size',
  color: 'color',
  finish: 'finish',
  digitalBrowser: 'digitalBrowser',
  website: 'website',
  distributor: 'distributor',
  culture: 'culture',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  seoKeywords: 'seoKeywords',
  seoSlug: 'seoSlug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuoteRequestScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  message: 'message',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CollectionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  userId: 'userId',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SavedProductScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  collectionId: 'collectionId',
  savedAt: 'savedAt'
};

exports.Prisma.HeroScalarFieldEnum = {
  id: 'id',
  heading: 'heading',
  subHeading: 'subHeading',
  description: 'description',
  ctaTitle: 'ctaTitle',
  ctaLink: 'ctaLink',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  title: 'title',
  imageUrl: 'imageUrl',
  link: 'link',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  imageUrl: 'imageUrl',
  link: 'link',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuoteScalarFieldEnum = {
  id: 'id',
  text: 'text',
  author: 'author',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WeddingPlannerScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  ctaText: 'ctaText',
  ctaLink: 'ctaLink',
  imageUrl: 'imageUrl',
  badgeText: 'badgeText',
  badgeSubtext: 'badgeSubtext',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CultureScalarFieldEnum = {
  id: 'id',
  name: 'name',
  title: 'title',
  subtitle: 'subtitle',
  description: 'description',
  ctaText: 'ctaText',
  ctaLink: 'ctaLink',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RingCustomizationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  ctaText: 'ctaText',
  ctaLink: 'ctaLink',
  processImageUrl: 'processImageUrl',
  example1Title: 'example1Title',
  example1Desc: 'example1Desc',
  example1ImageUrl: 'example1ImageUrl',
  example2Title: 'example2Title',
  example2Desc: 'example2Desc',
  example2ImageUrl: 'example2ImageUrl',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DiamondCertificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  fullContent: 'fullContent',
  ctaText: 'ctaText',
  ctaLink: 'ctaLink',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CelebrationProcessScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CelebrationProcessStepScalarFieldEnum = {
  id: 'id',
  celebrationProcessId: 'celebrationProcessId',
  title: 'title',
  description: 'description',
  icon: 'icon',
  order: 'order',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FAQScalarFieldEnum = {
  id: 'id',
  question: 'question',
  answer: 'answer',
  category: 'category',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GalleryScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subtitle: 'subtitle',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GalleryItemScalarFieldEnum = {
  id: 'id',
  galleryId: 'galleryId',
  title: 'title',
  imageUrl: 'imageUrl',
  fileName: 'fileName',
  originalName: 'originalName',
  fileType: 'fileType',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  filePath: 'filePath',
  description: 'description',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PopupImageScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  originalName: 'originalName',
  filePath: 'filePath',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TopBannerScalarFieldEnum = {
  id: 'id',
  text: 'text',
  displayOrder: 'displayOrder',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  customerName: 'customerName',
  rating: 'rating',
  comment: 'comment',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  productName: 'productName',
  name: 'name',
  email: 'email',
  phone: 'phone',
  culture: 'culture',
  appointmentType: 'appointmentType',
  preferredDate: 'preferredDate',
  preferredTime: 'preferredTime',
  additionalNotes: 'additionalNotes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestimonialScalarFieldEnum = {
  id: 'id',
  clientName: 'clientName',
  clientTitle: 'clientTitle',
  company: 'company',
  content: 'content',
  rating: 'rating',
  imageUrl: 'imageUrl',
  isActive: 'isActive',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TestimonialSectionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subtitle: 'subtitle',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Admin: 'Admin',
  Role: 'Role',
  AdminRole: 'AdminRole',
  Banner: 'Banner',
  Product: 'Product',
  QuoteRequest: 'QuoteRequest',
  Collection: 'Collection',
  SavedProduct: 'SavedProduct',
  Hero: 'Hero',
  Category: 'Category',
  Service: 'Service',
  Quote: 'Quote',
  WeddingPlanner: 'WeddingPlanner',
  Culture: 'Culture',
  RingCustomization: 'RingCustomization',
  DiamondCertification: 'DiamondCertification',
  CelebrationProcess: 'CelebrationProcess',
  CelebrationProcessStep: 'CelebrationProcessStep',
  FAQ: 'FAQ',
  Gallery: 'Gallery',
  GalleryItem: 'GalleryItem',
  PopupImage: 'PopupImage',
  TopBanner: 'TopBanner',
  Review: 'Review',
  Appointment: 'Appointment',
  Testimonial: 'Testimonial',
  TestimonialSection: 'TestimonialSection'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
